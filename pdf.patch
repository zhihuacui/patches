diff -urN app/vendor/dompdf/dompdf/lib/Cpdf.php new/vendor/dompdf/dompdf/lib/Cpdf.php
--- app/vendor/dompdf/dompdf/lib/Cpdf.php	2024-04-29 07:01:28.000000000 +0000
+++ new/vendor/dompdf/dompdf/lib/Cpdf.php	2024-12-11 07:29:08.884896655 +0000
@@ -5618,7 +5618,6 @@
 
             if ($error) {
                 $this->addMessage('PNG error - (' . $file . ') ' . $errormsg);
-
                 return;
             }
         }  //End isset($this->imagelist[$file]) (png Duplicate removal)
@@ -5636,10 +5635,14 @@
      */
     protected function addImagePngAlpha($file, $x, $y, $w, $h, $byte)
     {
+//        $start = \Drupal\Component\Utility\Timer::read('PDF');
+//        \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer[__FUNCTION__."List"][] = $file;
         // generate images
         $img = @imagecreatefrompng($file);
 
         if ($img === false) {
+//            $end = \Drupal\Component\Utility\Timer::read('PDF');
+//            \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer[__FUNCTION__.'_ElapseTime'] += ($end-$start);
             return;
         }
 
@@ -5671,6 +5674,7 @@
 
         // Use PECL gmagick + Graphics Magic to process transparent PNG images
         if (extension_loaded("gmagick")) {
+            \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer['png-extension'] =  "gmagick";
             $gmagick = new \Gmagick($file);
             $gmagick->setimageformat('png');
 
@@ -5703,6 +5707,7 @@
         }
         // Use PECL imagick + ImageMagic to process transparent PNG images
         elseif (extension_loaded("imagick")) {
+            \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer['png-extension'] =  "imagick";
             // Native cloning was added to pecl-imagick in svn commit 263814
             // the first version containing it was 3.0.1RC1
             static $imagickClonable = null;
@@ -5760,6 +5765,7 @@
 
             $imgplain = @imagecreatefrompng($tempfile_plain);
         } else {
+            \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer['png-extension'] =  "pixel-traversal";
             // allocated colors cache
             $allocated_colors = [];
 
@@ -5816,6 +5822,8 @@
         $this->addImagePng($imgplain, $tempfile_plain, $x, $y, $w, $h, false, ($tempfile_alpha !== null));
         imagedestroy($imgplain);
         $this->imageCache[] = $tempfile_plain;
+//        $end = \Drupal\Component\Utility\Timer::read('PDF');
+//        \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer[__FUNCTION__.'_ElapseTime'] += ($end-$start);
     }
 
     /**
@@ -5831,6 +5839,8 @@
      */
     function addPngFromFile($file, $x, $y, $w = 0, $h = 0)
     {
+        $start = \Drupal\Component\Utility\Timer::read('PDF');
+        \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer[__FUNCTION__."List"][] = $file;
         if (!function_exists("imagecreatefrompng")) {
             throw new \Exception("The PHP GD extension is required, but is not installed.");
         }
@@ -5845,6 +5855,8 @@
 
             $img = null;
             $this->addImagePng($img, $plainFile, $x, $y, $w, $h, false, ($plainFile !== null));
+            $end = \Drupal\Component\Utility\Timer::read('PDF');
+            \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer[__FUNCTION__.'_ElapseTime'] += ($end-$start);
             return;
         }
 
@@ -5865,6 +5877,8 @@
 
             if ($is_alpha) { // exclude grayscale alpha
                 $this->addImagePngAlpha($file, $x, $y, $w, $h, $color_type);
+                $end = \Drupal\Component\Utility\Timer::read('PDF');
+                \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer[__FUNCTION__.'_ElapseTime'] += ($end-$start);
                 return;
             }
 
@@ -5880,6 +5894,8 @@
             //image in with alpha blending.
             $imgtmp = @imagecreatefrompng($file);
             if (!$imgtmp) {
+                $end = \Drupal\Component\Utility\Timer::read('PDF');
+                \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer[__FUNCTION__.'_ElapseTime'] += ($end-$start);
                 return;
             }
             $sx = imagesx($imgtmp);
@@ -5906,6 +5922,8 @@
         if ($img) {
             imagedestroy($img);
         }
+        $end = \Drupal\Component\Utility\Timer::read('PDF');
+        \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer[__FUNCTION__.'_ElapseTime'] += ($end-$start);
     }
 
     /**
@@ -5919,6 +5937,8 @@
      */
     function addSvgFromFile($file, $x, $y, $w = 0, $h = 0)
     {
+        $start = \Drupal\Component\Utility\Timer::read('PDF');
+        \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer[__FUNCTION__."List"][] = $file;
         $doc = new \Svg\Document();
         $doc->loadFile($file);
         $dimensions = $doc->getDimensions();
@@ -5931,6 +5951,8 @@
         $doc->render($surface);
 
         $this->restore();
+        $end = \Drupal\Component\Utility\Timer::read('PDF');
+        \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer[__FUNCTION__.'_ElapseTime'] += ($end-$start);
     }
 
     /**
@@ -6238,7 +6260,8 @@
     {
         // attempt to add a jpeg image straight from a file, using no GD commands
         // note that this function is unable to operate on a remote file.
-
+        $start = \Drupal\Component\Utility\Timer::read('PDF');
+        \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer[__FUNCTION__."List"][] = $img;
         if (!file_exists($img)) {
             return;
         }
@@ -6275,6 +6298,8 @@
         }
 
         $this->addJpegImage_common($data, $img, $imageWidth, $imageHeight, $x, $y, $w, $h, $channels);
+        $end = \Drupal\Component\Utility\Timer::read('PDF');
+        \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer[__FUNCTION__.'_ElapseTime'] += ($end-$start);
     }
 
     /**
diff -urN app/vendor/dompdf/dompdf/src/Adapter/CPDF.php new/vendor/dompdf/dompdf/src/Adapter/CPDF.php
--- app/vendor/dompdf/dompdf/src/Adapter/CPDF.php	2024-04-29 07:01:28.000000000 +0000
+++ new/vendor/dompdf/dompdf/src/Adapter/CPDF.php	2024-12-11 07:29:08.914896677 +0000
@@ -588,12 +588,16 @@
      */
     protected function _convert_to_png($image_url, $type)
     {
+        $start = \Drupal\Component\Utility\Timer::read('PDF');
+        \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer[__FUNCTION__."List"][] = $image_url;
         $filename = Cache::getTempImage($image_url);
 
         if ($filename !== null && file_exists($filename)) {
+            $end = \Drupal\Component\Utility\Timer::read('PDF');
+            \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer[__FUNCTION__.'_ElapseTime(ImageRenderTime)'] += ($end-$start);
             return $filename;
         }
- 
+
         $func_name = "imagecreatefrom$type";
 
         set_error_handler([Helpers::class, "record_warnings"]);
@@ -627,12 +631,15 @@
         if ($filename !== null) {
             Cache::addTempImage($image_url, $filename);
         }
-
+        $end = \Drupal\Component\Utility\Timer::read('PDF');
+        \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer[__FUNCTION__.'_ElapseTime(ImageRenderTime)'] += ($end-$start);
         return $filename;
     }
 
     public function image($img, $x, $y, $w, $h, $resolution = "normal")
     {
+//        $start = \Drupal\Component\Utility\Timer::read('PDF');
+//        \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer[__FUNCTION__."List"][] = $img;
         [$width, $height, $type] = Helpers::dompdf_getimagesize($img, $this->get_dompdf()->getHttpContext());
 
         $debug_png = $this->_dompdf->getOptions()->getDebugPng();
@@ -677,6 +684,8 @@
             default:
                 if ($debug_png) print '!!!unknown!!!';
         }
+//        $end = \Drupal\Component\Utility\Timer::read('PDF');
+//        \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer[__FUNCTION__.'_ElapseTime(ImageRenderTime)'] += ($end-$start);
     }
 
     public function select($x, $y, $w, $h, $font, $size, $color = [0, 0, 0], $opts = [])
diff -urN app/vendor/dompdf/dompdf/src/Dompdf.php new/vendor/dompdf/dompdf/src/Dompdf.php
--- app/vendor/dompdf/dompdf/src/Dompdf.php	2024-04-29 07:01:28.000000000 +0000
+++ new/vendor/dompdf/dompdf/src/Dompdf.php	2024-12-11 07:29:08.914896677 +0000
@@ -729,7 +729,7 @@
         }
 
         $this->processHtml();
-
+        \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer['AfterProcessHtml'] = \Drupal\Component\Utility\Timer::read('PDF');
         $this->css->apply_styles($this->tree);
 
         // @page style rules : size, margins
@@ -740,7 +740,6 @@
         foreach ($pageStyles as $pageStyle) {
             $pageStyle->inherit($basePageStyle);
         }
-
         // Set paper size if defined via CSS
         if (is_array($basePageStyle->size)) {
             // Orientation is already applied when reading the computed CSS
@@ -751,6 +750,8 @@
             [$width, $height] = $basePageStyle->size;
             $this->setPaper([0, 0, $width, $height]);
         }
+        \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer['AfterApplyStyles'] = \Drupal\Component\Utility\Timer::read('PDF');
+        \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer['TotalApplyCssElapseTime'] = \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer['AfterApplyStyles'] - \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer['AfterProcessHtml'];
 
         // Create a new canvas instance if the current one does not match the
         // desired paper size
@@ -773,7 +774,7 @@
             }
             Factory::decorate_frame($frame, $this, $root);
         }
-
+        \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer['AfterDecorateFrame'] = \Drupal\Component\Utility\Timer::read('PDF');
         // Add meta information
         $title = $this->dom->getElementsByTagName("title");
         if ($title->length) {
@@ -800,13 +801,13 @@
                 $canvas->set_default_view($this->defaultView, $this->defaultViewOptions);
             }
         }
-
+        \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer['AfterAddMeteData'] = \Drupal\Component\Utility\Timer::read('PDF');
         $root->set_containing_block(0, 0, $canvas->get_width(), $canvas->get_height());
         $root->set_renderer(new Renderer($this));
 
         // This is where the magic happens:
         $root->reflow();
-
+        \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer['AfterComposePage'] = \Drupal\Component\Utility\Timer::read('PDF');
         if (isset($this->callbacks["end_document"])) {
             $fs = $this->callbacks["end_document"];
 
diff -urN app/vendor/dompdf/dompdf/src/Image/Cache.php new/vendor/dompdf/dompdf/src/Image/Cache.php
--- app/vendor/dompdf/dompdf/src/Image/Cache.php	2024-04-29 07:01:28.000000000 +0000
+++ new/vendor/dompdf/dompdf/src/Image/Cache.php	2024-12-11 07:29:08.924896682 +0000
@@ -47,7 +47,7 @@
     public static $broken_image = "data:image/svg+xml;charset=utf8,%3C?xml version='1.0'?%3E%3Csvg width='64' height='64' xmlns='http://www.w3.org/2000/svg'%3E%3Cg%3E%3Crect stroke='%23666666' id='svg_1' height='60.499994' width='60.166667' y='1.666669' x='1.999998' stroke-width='1.5' fill='none'/%3E%3Cline stroke-linecap='null' stroke-linejoin='null' id='svg_3' y2='59.333253' x2='59.749916' y1='4.333415' x1='4.250079' stroke-width='1.5' stroke='%23999999' fill='none'/%3E%3Cline stroke-linecap='null' stroke-linejoin='null' id='svg_4' y2='59.999665' x2='4.062838' y1='3.750342' x1='60.062164' stroke-width='1.5' stroke='%23999999' fill='none'/%3E%3C/g%3E%3C/svg%3E";
 
     public static $error_message = "Image not found or type unknown";
-    
+
     /**
      * Resolve and fetch an image for use.
      *
@@ -62,11 +62,13 @@
      */
     static function resolve_url($url, $protocol, $host, $base_path, Options $options)
     {
+        $start = \Drupal\Component\Utility\Timer::read('PDF');
+        \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer[__FUNCTION__."List"][] = $url;
         $tempfile = null;
         $resolved_url = null;
         $type = null;
         $message = null;
-        
+
         try {
             $full_url = Helpers::build_url($protocol, $host, $base_path, $url);
 
@@ -77,7 +79,7 @@
             $parsed_url = Helpers::explode_url($full_url);
             $protocol = strtolower($parsed_url["protocol"]);
             $is_data_uri = strpos($protocol, "data:") === 0;
-            
+
             if (!$is_data_uri) {
                 $allowed_protocols = $options->getAllowedProtocols();
                 if (!array_key_exists($protocol, $allowed_protocols)) {
@@ -158,7 +160,7 @@
                                 if (empty($inner_full_url)) {
                                     continue;
                                 }
-                                
+
                                 self::detectCircularRef($full_url, $inner_full_url);
                                 self::$svgRefs[$full_url][] = $inner_full_url;
                                 [$resolved_url, $type, $message] = self::resolve_url($url, $parsed_url["protocol"], $parsed_url["host"], $parsed_url["path"], $options);
@@ -170,7 +172,7 @@
                     },
                     false
                 );
-        
+
                 if (($fp = fopen($resolved_url, "r")) !== false) {
                     while ($line = fread($fp, 8192)) {
                         xml_parse($parser, $line, false);
@@ -190,7 +192,10 @@
             Helpers::record_warnings($e->getCode(), $e->getMessage() . " \n $url", $e->getFile(), $e->getLine());
             self::$_cache[$full_url] = $resolved_url;
         }
-
+        //\Drupal\utwp_pdf_export\Controller\PdfExportController::$timer[] = \Drupal\Component\Utility\Timer::read('PDF');
+        $end = \Drupal\Component\Utility\Timer::read('PDF');
+        \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer[__FUNCTION__."ResolvedList"][] = $resolved_url;
+        \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer[__FUNCTION__.'_ElapseTime(DownloadImage)'] += ($end - $start);
         return [$resolved_url, $type, $message];
     }
 
diff -urN app/vendor/dompdf/dompdf/src/Renderer/Image.php new/vendor/dompdf/dompdf/src/Renderer/Image.php
--- app/vendor/dompdf/dompdf/src/Renderer/Image.php	2024-04-29 07:01:28.000000000 +0000
+++ new/vendor/dompdf/dompdf/src/Renderer/Image.php	2024-12-11 07:29:08.924896682 +0000
@@ -22,6 +22,8 @@
      */
     function render(Frame $frame)
     {
+        $start = \Drupal\Component\Utility\Timer::read('PDF');
+        \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer['Image_' . __FUNCTION__."List"][] = $frame->get_image_url();
         $style = $frame->get_style();
         $node = $frame->get_node();
         $border_box = $frame->get_border_box();
@@ -69,5 +71,7 @@
 
         $this->addNamedDest($node);
         $this->debugBlockLayout($frame, "blue");
+        $end = \Drupal\Component\Utility\Timer::read('PDF');
+        \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer['Image_' . __FUNCTION__.'_ElapseTime'] += ($end-$start);
     }
 }
diff -urN app/web/modules/custom/utwp_pdf_export/src/Controller/PdfExportController.php new/web/modules/custom/utwp_pdf_export/src/Controller/PdfExportController.php
--- app/web/modules/custom/utwp_pdf_export/src/Controller/PdfExportController.php	2024-12-11 07:30:47.424955255 +0000
+++ new/web/modules/custom/utwp_pdf_export/src/Controller/PdfExportController.php	2024-12-11 07:29:09.914897352 +0000
@@ -14,6 +14,7 @@
  */
 class PdfExportController extends ControllerBase {
 
+  public static $timer = [];
   const PDP_WINDSHIELD = "0";
   const PDP_CUSTOMER = "1";
   const PDP_VENDOR = "2";
@@ -27,6 +28,8 @@
    * Generating the pdf file to download.
    */
   public function getPdfTemplate() {
+    \Drupal\Component\Utility\Timer::start('PDF');
+    \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer['controllerStart'] =  \Drupal\Component\Utility\Timer::read('PDF');
     $query = \Drupal::request()->query->all();
 
     $pdfTemplate = '';
@@ -99,11 +102,12 @@
     if (!empty($query["nodeId"]) || !empty($query["listVehiclesIds"])) {
       $htmlElement = $pdfExportUtility->setPdfViewsAndTemplate($query, $view,
         $pdfTemplate);
+      \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer['htmlElementGenerated'] =  \Drupal\Component\Utility\Timer::read('PDF');
     }
     if (!empty($htmlElement)) {
       $html = \Drupal::service('renderer')->render($htmlElement);
-      $pdfExportUtility->convertHtmltoPdf($html, $name, $paper_size,
-        $orientation);
+      \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer['htmlGenerated'] =  \Drupal\Component\Utility\Timer::read('PDF');
+      $pdfExportUtility->convertHtmltoPdf($html, $name, $paper_size, $orientation);
       return [];
     }
     else {
diff -urN app/web/modules/custom/utwp_pdf_export/src/Utility/PdfExportUtility.php new/web/modules/custom/utwp_pdf_export/src/Utility/PdfExportUtility.php
--- app/web/modules/custom/utwp_pdf_export/src/Utility/PdfExportUtility.php	2024-12-11 07:30:47.424955255 +0000
+++ new/web/modules/custom/utwp_pdf_export/src/Utility/PdfExportUtility.php	2024-12-11 07:29:09.914897352 +0000
@@ -15,6 +15,7 @@
 use Drupal\utwp_dao\Country\CountryDao;
 use Drupal\utwp_multicountry\DomainUtwpUtility;
 use Drupal\utwp_pdf_export\Controller\PdfExportController;
+use Symfony\Component\VarDumper\VarDumper;
 
 /**
  * Class PdfExportUtility.
@@ -43,6 +44,7 @@
     $view,
     $pdfTemplate
   ) {
+    \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer['setPdfViewsAndTemplateStart'] =  \Drupal\Component\Utility\Timer::read('PDF');
     /** @var \Drupal\Core\Entity\EntityViewBuilderInterface $viewBuilder */
     $viewBuilder = \Drupal::entityTypeManager()->getViewBuilder('node');
     // Current date.
@@ -110,16 +112,17 @@
           if (isset($query['vehiclesPrices']) && $query['vehiclesPrices'][$key] !== NULL) {
             $price = $query['vehiclesPrices'][$key];
             $vehicle->set('field_vehicle_price_offer', $price);
-            $vehicle->save();
+            //$vehicle->save();
           }
           else {
             $vehicle->set('field_vehicle_price_offer', NULL);
-            $vehicle->save();
+            //$vehicle->save();
           }
           $vehiclesNew[$vehicle->id()] = $vehicle->hasTranslation($language) ? $vehicle->getTranslation($language) : $vehicle;
         }
       }
       $vehicleView = $viewBuilder->viewMultiple($vehiclesNew, $view, $language);
+      \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer['afterPLPViewBuilderBuild'] =  \Drupal\Component\Utility\Timer::read('PDF');
 
       if ($query["templateType"] == pdfExportController::PLP_VENDOR
         || $query["templateType"] == pdfExportController::PLP_CUSTOMER
@@ -155,6 +158,7 @@
         }
       }
       $vehicleHtml = \Drupal::service('renderer')->render($vehicleView);
+      \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer['afterPLPRender'] =  \Drupal\Component\Utility\Timer::read('PDF');
       $config = \Drupal::config('utwp.config');
       $copyright = $config->get('copyright');
       $totalPrice = '';
@@ -184,10 +188,14 @@
         return NULL;
       }
       $vehicleB->set('field_vehicle_price_offer', NULL);
-      $vehicleB->save();
+      \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer['beforePDPSave'] =  \Drupal\Component\Utility\Timer::read('PDF');
+      //$vehicleB->save();
+      \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer['afterPDPSave'] =  \Drupal\Component\Utility\Timer::read('PDF');
       $vehicle = $vehicleB->hasTranslation($language) ? $vehicleB->getTranslation($language) : $vehicleB;
       $vehicleView = $viewBuilder->view($vehicle, $view, $language);
+      \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer['afterPDPViewBuilderBuild'] =  \Drupal\Component\Utility\Timer::read('PDF');
       $vehicleHtml = \Drupal::service('renderer')->render($vehicleView);
+      \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer['afterPDPRender'] =  \Drupal\Component\Utility\Timer::read('PDF');
       if ($isBackOffice) {
         $pdpContact = self::getCurrentUserPlpPdpContact();
       }
@@ -292,6 +300,7 @@
     $paper_size,
     $orientation
   ) {
+    \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer['startConvertHtmltoPdf'] = \Drupal\Component\Utility\Timer::read('PDF');
     $themeHandler = \Drupal::service('theme_handler');
     $chrootPaths = [
       $themeHandler->getTheme($themeHandler->getDefault())->getPath(),
@@ -313,9 +322,26 @@
     $options->setIsHtml5ParserEnabled(TRUE);
     $dompdf = new Dompdf($options);
     $dompdf->loadHtml($html);
+    \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer['AfterLoadHtml'] = \Drupal\Component\Utility\Timer::read('PDF');
     $dompdf->setPaper($paper_size, $orientation);
     $dompdf->render();
+    \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer['AfterRender'] = \Drupal\Component\Utility\Timer::read('PDF');
+    //file_put_contents('/tmp/' . time() . '.pdf', $dompdf->output());
     $dompdf->stream($name, ["Attachment" => FALSE]);
+    \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer['end'] = \Drupal\Component\Utility\Timer::read('PDF');
+    ob_start();
+    VarDumper::dump(
+      array_merge(array_intersect_key(array_flip([
+        "png-extension",
+        "TotalApplyCssElapseTime",
+        "resolve_urlList", "resolve_urlResolvedList", "resolve_url_ElapseTime(DownloadImage)",
+        "Image_renderList", "Image_render_ElapseTime",
+        "addPngFromFileList", "addPngFromFile_ElapseTime",
+        "addJpegFromFileList", "addJpegFromFile_ElapseTime",
+        "addSvgFromFileList", "addSvgFromFile_ElapseTime",
+        "addImagePngAlphaList", "addImagePngAlpha_ElapseTime",
+      ]), \Drupal\utwp_pdf_export\Controller\PdfExportController::$timer),\Drupal\utwp_pdf_export\Controller\PdfExportController::$timer));
+    file_put_contents(\Drupal::root() . '/sites/default/files/pdf-gen-report.html' ,ob_get_clean() . "<details><xmp>" . $html . "</xmp></details>");
     exit();
   }
 
diff -urN app/web/modules/custom/utwp_pdf_export/templates/pdp_customer.html.twig new/web/modules/custom/utwp_pdf_export/templates/pdp_customer.html.twig
--- app/web/modules/custom/utwp_pdf_export/templates/pdp_customer.html.twig	2024-12-11 07:30:47.424955255 +0000
+++ new/web/modules/custom/utwp_pdf_export/templates/pdp_customer.html.twig	2024-12-11 07:29:09.914897352 +0000
@@ -7,8 +7,8 @@
 <header>
     <div class="wrap-header">
         <div class="header-left">
-            <img src="./{{ directory }}/assets/img/logo.png" alt="Renault Trucks" height="50">
-            <img class="utwp-logo" src="./{{ directory }}/assets/img/utwp-pdf.png" alt="Used Trucks by Renault Trucks"
+            <img src="./{{ directory }}/assets/img/logo_50.png" alt="Renault Trucks" height="50">
+            <img class="utwp-logo" src="./{{ directory }}/assets/img/utwp-pdf_60.png" alt="Used Trucks by Renault Trucks"
                  height="60">
         </div>
         <div class="header-right">
@@ -56,7 +56,7 @@
         </p>
     </div>
     <div class="footer-right">
-        <img class="utwp-logo-footer" src="./{{ directory }}/assets/img/utwp-pdf.png" alt="Used Trucks by Renault Trucks"
+        <img class="utwp-logo-footer" src="./{{ directory }}/assets/img/utwp-pdf_40.png" alt="Used Trucks by Renault Trucks"
              height="40">
         <p class="copyright"> copyright &copy; {{ copyright }} </p>
     </div>
diff -urN app/web/themes/custom/utwp/templates/node/node--utwp-vehicle--pdf-pdp-customer.html.twig new/web/themes/custom/utwp/templates/node/node--utwp-vehicle--pdf-pdp-customer.html.twig
--- app/web/themes/custom/utwp/templates/node/node--utwp-vehicle--pdf-pdp-customer.html.twig	2024-12-11 07:30:45.894954276 +0000
+++ new/web/themes/custom/utwp/templates/node/node--utwp-vehicle--pdf-pdp-customer.html.twig	2024-12-11 07:29:12.324898975 +0000
@@ -208,7 +208,7 @@
                             </span>
             {% endif %}
             {% if vo.rtl_price_edit_eur is not empty %}
-
+              <h1>asdadasdas</h1>
               <span class="subprice-block-pdp">{{ vo.rtl_price_edit_eur['#markup']|number_format(0, '.', ' ')~" EUR" }}
                 {% trans with {'langcode': language} %}
                   utwp.pdp.vat
